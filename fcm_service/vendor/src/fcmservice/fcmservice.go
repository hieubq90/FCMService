// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package fcmservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type FCMService interface {
	// Parameters:
	//  - Phone
	//  - DeviceToken
	AddDeviceToken(phone string, deviceToken TDeviceToken) (r bool, err error)
	// Parameters:
	//  - Phone
	//  - TokenList
	AddListDeviceToken(phone string, tokenList TDeviceTokenList) (r bool, err error)
	// Parameters:
	//  - Message
	//  - DeviceToken
	NotiToDeviceToken(message *TFCMMessage, deviceToken TDeviceToken) (r *TResponse, err error)
	// Parameters:
	//  - Message
	//  - Phone
	NotiToPhone(message *TFCMMessage, phone string) (r *TResponse, err error)
	// Parameters:
	//  - Topic
	//  - Condition
	//  - Message
	NotiToTopic(topic string, condition string, message *TFCMMessage) (r *TResponse, err error)
}

type FCMServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewFCMServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FCMServiceClient {
	return &FCMServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewFCMServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FCMServiceClient {
	return &FCMServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Phone
//  - DeviceToken
func (p *FCMServiceClient) AddDeviceToken(phone string, deviceToken TDeviceToken) (r bool, err error) {
	if err = p.sendAddDeviceToken(phone, deviceToken); err != nil {
		return
	}
	return p.recvAddDeviceToken()
}

func (p *FCMServiceClient) sendAddDeviceToken(phone string, deviceToken TDeviceToken) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addDeviceToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FCMServiceAddDeviceTokenArgs{
		Phone:       phone,
		DeviceToken: deviceToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FCMServiceClient) recvAddDeviceToken() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addDeviceToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addDeviceToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addDeviceToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addDeviceToken failed: invalid message type")
		return
	}
	result := FCMServiceAddDeviceTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Phone
//  - TokenList
func (p *FCMServiceClient) AddListDeviceToken(phone string, tokenList TDeviceTokenList) (r bool, err error) {
	if err = p.sendAddListDeviceToken(phone, tokenList); err != nil {
		return
	}
	return p.recvAddListDeviceToken()
}

func (p *FCMServiceClient) sendAddListDeviceToken(phone string, tokenList TDeviceTokenList) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addListDeviceToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FCMServiceAddListDeviceTokenArgs{
		Phone:     phone,
		TokenList: tokenList,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FCMServiceClient) recvAddListDeviceToken() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addListDeviceToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addListDeviceToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addListDeviceToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addListDeviceToken failed: invalid message type")
		return
	}
	result := FCMServiceAddListDeviceTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Message
//  - DeviceToken
func (p *FCMServiceClient) NotiToDeviceToken(message *TFCMMessage, deviceToken TDeviceToken) (r *TResponse, err error) {
	if err = p.sendNotiToDeviceToken(message, deviceToken); err != nil {
		return
	}
	return p.recvNotiToDeviceToken()
}

func (p *FCMServiceClient) sendNotiToDeviceToken(message *TFCMMessage, deviceToken TDeviceToken) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notiToDeviceToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FCMServiceNotiToDeviceTokenArgs{
		Message:     message,
		DeviceToken: deviceToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FCMServiceClient) recvNotiToDeviceToken() (value *TResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "notiToDeviceToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "notiToDeviceToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notiToDeviceToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "notiToDeviceToken failed: invalid message type")
		return
	}
	result := FCMServiceNotiToDeviceTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Message
//  - Phone
func (p *FCMServiceClient) NotiToPhone(message *TFCMMessage, phone string) (r *TResponse, err error) {
	if err = p.sendNotiToPhone(message, phone); err != nil {
		return
	}
	return p.recvNotiToPhone()
}

func (p *FCMServiceClient) sendNotiToPhone(message *TFCMMessage, phone string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notiToPhone", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FCMServiceNotiToPhoneArgs{
		Message: message,
		Phone:   phone,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FCMServiceClient) recvNotiToPhone() (value *TResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "notiToPhone" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "notiToPhone failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notiToPhone failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "notiToPhone failed: invalid message type")
		return
	}
	result := FCMServiceNotiToPhoneResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
//  - Condition
//  - Message
func (p *FCMServiceClient) NotiToTopic(topic string, condition string, message *TFCMMessage) (r *TResponse, err error) {
	if err = p.sendNotiToTopic(topic, condition, message); err != nil {
		return
	}
	return p.recvNotiToTopic()
}

func (p *FCMServiceClient) sendNotiToTopic(topic string, condition string, message *TFCMMessage) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notiToTopic", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FCMServiceNotiToTopicArgs{
		Topic:     topic,
		Condition: condition,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FCMServiceClient) recvNotiToTopic() (value *TResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "notiToTopic" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "notiToTopic failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notiToTopic failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "notiToTopic failed: invalid message type")
		return
	}
	result := FCMServiceNotiToTopicResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type FCMServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FCMService
}

func (p *FCMServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FCMServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FCMServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFCMServiceProcessor(handler FCMService) *FCMServiceProcessor {

	self12 := &FCMServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["addDeviceToken"] = &fCMServiceProcessorAddDeviceToken{handler: handler}
	self12.processorMap["addListDeviceToken"] = &fCMServiceProcessorAddListDeviceToken{handler: handler}
	self12.processorMap["notiToDeviceToken"] = &fCMServiceProcessorNotiToDeviceToken{handler: handler}
	self12.processorMap["notiToPhone"] = &fCMServiceProcessorNotiToPhone{handler: handler}
	self12.processorMap["notiToTopic"] = &fCMServiceProcessorNotiToTopic{handler: handler}
	return self12
}

func (p *FCMServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x13

}

type fCMServiceProcessorAddDeviceToken struct {
	handler FCMService
}

func (p *fCMServiceProcessorAddDeviceToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FCMServiceAddDeviceTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addDeviceToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FCMServiceAddDeviceTokenResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AddDeviceToken(args.Phone, args.DeviceToken); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addDeviceToken: "+err2.Error())
		oprot.WriteMessageBegin("addDeviceToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addDeviceToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fCMServiceProcessorAddListDeviceToken struct {
	handler FCMService
}

func (p *fCMServiceProcessorAddListDeviceToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FCMServiceAddListDeviceTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addListDeviceToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FCMServiceAddListDeviceTokenResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AddListDeviceToken(args.Phone, args.TokenList); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addListDeviceToken: "+err2.Error())
		oprot.WriteMessageBegin("addListDeviceToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addListDeviceToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fCMServiceProcessorNotiToDeviceToken struct {
	handler FCMService
}

func (p *fCMServiceProcessorNotiToDeviceToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FCMServiceNotiToDeviceTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notiToDeviceToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FCMServiceNotiToDeviceTokenResult{}
	var retval *TResponse
	var err2 error
	if retval, err2 = p.handler.NotiToDeviceToken(args.Message, args.DeviceToken); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notiToDeviceToken: "+err2.Error())
		oprot.WriteMessageBegin("notiToDeviceToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("notiToDeviceToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fCMServiceProcessorNotiToPhone struct {
	handler FCMService
}

func (p *fCMServiceProcessorNotiToPhone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FCMServiceNotiToPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notiToPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FCMServiceNotiToPhoneResult{}
	var retval *TResponse
	var err2 error
	if retval, err2 = p.handler.NotiToPhone(args.Message, args.Phone); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notiToPhone: "+err2.Error())
		oprot.WriteMessageBegin("notiToPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("notiToPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fCMServiceProcessorNotiToTopic struct {
	handler FCMService
}

func (p *fCMServiceProcessorNotiToTopic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FCMServiceNotiToTopicArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notiToTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FCMServiceNotiToTopicResult{}
	var retval *TResponse
	var err2 error
	if retval, err2 = p.handler.NotiToTopic(args.Topic, args.Condition, args.Message); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notiToTopic: "+err2.Error())
		oprot.WriteMessageBegin("notiToTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("notiToTopic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Phone
//  - DeviceToken
type FCMServiceAddDeviceTokenArgs struct {
	Phone       string       `thrift:"phone,1" json:"phone"`
	DeviceToken TDeviceToken `thrift:"deviceToken,2" json:"deviceToken"`
}

func NewFCMServiceAddDeviceTokenArgs() *FCMServiceAddDeviceTokenArgs {
	return &FCMServiceAddDeviceTokenArgs{}
}

func (p *FCMServiceAddDeviceTokenArgs) GetPhone() string {
	return p.Phone
}

func (p *FCMServiceAddDeviceTokenArgs) GetDeviceToken() TDeviceToken {
	return p.DeviceToken
}
func (p *FCMServiceAddDeviceTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceAddDeviceTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *FCMServiceAddDeviceTokenArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TDeviceToken(v)
		p.DeviceToken = temp
	}
	return nil
}

func (p *FCMServiceAddDeviceTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDeviceToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceAddDeviceTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err)
	}
	return err
}

func (p *FCMServiceAddDeviceTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.DeviceToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceToken: ", p), err)
	}
	return err
}

func (p *FCMServiceAddDeviceTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceAddDeviceTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FCMServiceAddDeviceTokenResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewFCMServiceAddDeviceTokenResult() *FCMServiceAddDeviceTokenResult {
	return &FCMServiceAddDeviceTokenResult{}
}

var FCMServiceAddDeviceTokenResult_Success_DEFAULT bool

func (p *FCMServiceAddDeviceTokenResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return FCMServiceAddDeviceTokenResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FCMServiceAddDeviceTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FCMServiceAddDeviceTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceAddDeviceTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FCMServiceAddDeviceTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDeviceToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceAddDeviceTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FCMServiceAddDeviceTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceAddDeviceTokenResult(%+v)", *p)
}

// Attributes:
//  - Phone
//  - TokenList
type FCMServiceAddListDeviceTokenArgs struct {
	Phone     string           `thrift:"phone,1" json:"phone"`
	TokenList TDeviceTokenList `thrift:"tokenList,2" json:"tokenList"`
}

func NewFCMServiceAddListDeviceTokenArgs() *FCMServiceAddListDeviceTokenArgs {
	return &FCMServiceAddListDeviceTokenArgs{}
}

func (p *FCMServiceAddListDeviceTokenArgs) GetPhone() string {
	return p.Phone
}

func (p *FCMServiceAddListDeviceTokenArgs) GetTokenList() TDeviceTokenList {
	return p.TokenList
}
func (p *FCMServiceAddListDeviceTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceAddListDeviceTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *FCMServiceAddListDeviceTokenArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TDeviceTokenList, 0, size)
	p.TokenList = tSlice
	for i := 0; i < size; i++ {
		var _elem14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.TokenList = append(p.TokenList, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FCMServiceAddListDeviceTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addListDeviceToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceAddListDeviceTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err)
	}
	return err
}

func (p *FCMServiceAddListDeviceTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.TokenList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TokenList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenList: ", p), err)
	}
	return err
}

func (p *FCMServiceAddListDeviceTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceAddListDeviceTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FCMServiceAddListDeviceTokenResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewFCMServiceAddListDeviceTokenResult() *FCMServiceAddListDeviceTokenResult {
	return &FCMServiceAddListDeviceTokenResult{}
}

var FCMServiceAddListDeviceTokenResult_Success_DEFAULT bool

func (p *FCMServiceAddListDeviceTokenResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return FCMServiceAddListDeviceTokenResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FCMServiceAddListDeviceTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FCMServiceAddListDeviceTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceAddListDeviceTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FCMServiceAddListDeviceTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addListDeviceToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceAddListDeviceTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FCMServiceAddListDeviceTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceAddListDeviceTokenResult(%+v)", *p)
}

// Attributes:
//  - Message
//  - DeviceToken
type FCMServiceNotiToDeviceTokenArgs struct {
	Message     *TFCMMessage `thrift:"message,1" json:"message"`
	DeviceToken TDeviceToken `thrift:"deviceToken,2" json:"deviceToken"`
}

func NewFCMServiceNotiToDeviceTokenArgs() *FCMServiceNotiToDeviceTokenArgs {
	return &FCMServiceNotiToDeviceTokenArgs{}
}

var FCMServiceNotiToDeviceTokenArgs_Message_DEFAULT *TFCMMessage

func (p *FCMServiceNotiToDeviceTokenArgs) GetMessage() *TFCMMessage {
	if !p.IsSetMessage() {
		return FCMServiceNotiToDeviceTokenArgs_Message_DEFAULT
	}
	return p.Message
}

func (p *FCMServiceNotiToDeviceTokenArgs) GetDeviceToken() TDeviceToken {
	return p.DeviceToken
}
func (p *FCMServiceNotiToDeviceTokenArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *FCMServiceNotiToDeviceTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceNotiToDeviceTokenArgs) readField1(iprot thrift.TProtocol) error {
	p.Message = &TFCMMessage{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *FCMServiceNotiToDeviceTokenArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TDeviceToken(v)
		p.DeviceToken = temp
	}
	return nil
}

func (p *FCMServiceNotiToDeviceTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notiToDeviceToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceNotiToDeviceTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *FCMServiceNotiToDeviceTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.DeviceToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceToken: ", p), err)
	}
	return err
}

func (p *FCMServiceNotiToDeviceTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceNotiToDeviceTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FCMServiceNotiToDeviceTokenResult struct {
	Success *TResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewFCMServiceNotiToDeviceTokenResult() *FCMServiceNotiToDeviceTokenResult {
	return &FCMServiceNotiToDeviceTokenResult{}
}

var FCMServiceNotiToDeviceTokenResult_Success_DEFAULT *TResponse

func (p *FCMServiceNotiToDeviceTokenResult) GetSuccess() *TResponse {
	if !p.IsSetSuccess() {
		return FCMServiceNotiToDeviceTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FCMServiceNotiToDeviceTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FCMServiceNotiToDeviceTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceNotiToDeviceTokenResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FCMServiceNotiToDeviceTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notiToDeviceToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceNotiToDeviceTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FCMServiceNotiToDeviceTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceNotiToDeviceTokenResult(%+v)", *p)
}

// Attributes:
//  - Message
//  - Phone
type FCMServiceNotiToPhoneArgs struct {
	Message *TFCMMessage `thrift:"message,1" json:"message"`
	Phone   string       `thrift:"phone,2" json:"phone"`
}

func NewFCMServiceNotiToPhoneArgs() *FCMServiceNotiToPhoneArgs {
	return &FCMServiceNotiToPhoneArgs{}
}

var FCMServiceNotiToPhoneArgs_Message_DEFAULT *TFCMMessage

func (p *FCMServiceNotiToPhoneArgs) GetMessage() *TFCMMessage {
	if !p.IsSetMessage() {
		return FCMServiceNotiToPhoneArgs_Message_DEFAULT
	}
	return p.Message
}

func (p *FCMServiceNotiToPhoneArgs) GetPhone() string {
	return p.Phone
}
func (p *FCMServiceNotiToPhoneArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *FCMServiceNotiToPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceNotiToPhoneArgs) readField1(iprot thrift.TProtocol) error {
	p.Message = &TFCMMessage{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *FCMServiceNotiToPhoneArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *FCMServiceNotiToPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notiToPhone_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceNotiToPhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *FCMServiceNotiToPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phone: ", p), err)
	}
	return err
}

func (p *FCMServiceNotiToPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceNotiToPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FCMServiceNotiToPhoneResult struct {
	Success *TResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewFCMServiceNotiToPhoneResult() *FCMServiceNotiToPhoneResult {
	return &FCMServiceNotiToPhoneResult{}
}

var FCMServiceNotiToPhoneResult_Success_DEFAULT *TResponse

func (p *FCMServiceNotiToPhoneResult) GetSuccess() *TResponse {
	if !p.IsSetSuccess() {
		return FCMServiceNotiToPhoneResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FCMServiceNotiToPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FCMServiceNotiToPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceNotiToPhoneResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FCMServiceNotiToPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notiToPhone_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceNotiToPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FCMServiceNotiToPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceNotiToPhoneResult(%+v)", *p)
}

// Attributes:
//  - Topic
//  - Condition
//  - Message
type FCMServiceNotiToTopicArgs struct {
	Topic string `thrift:"topic,1" json:"topic"`
	// unused field # 2
	Condition string       `thrift:"condition,3" json:"condition"`
	Message   *TFCMMessage `thrift:"message,4" json:"message"`
}

func NewFCMServiceNotiToTopicArgs() *FCMServiceNotiToTopicArgs {
	return &FCMServiceNotiToTopicArgs{}
}

func (p *FCMServiceNotiToTopicArgs) GetTopic() string {
	return p.Topic
}

func (p *FCMServiceNotiToTopicArgs) GetCondition() string {
	return p.Condition
}

var FCMServiceNotiToTopicArgs_Message_DEFAULT *TFCMMessage

func (p *FCMServiceNotiToTopicArgs) GetMessage() *TFCMMessage {
	if !p.IsSetMessage() {
		return FCMServiceNotiToTopicArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *FCMServiceNotiToTopicArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *FCMServiceNotiToTopicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceNotiToTopicArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *FCMServiceNotiToTopicArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Condition = v
	}
	return nil
}

func (p *FCMServiceNotiToTopicArgs) readField4(iprot thrift.TProtocol) error {
	p.Message = &TFCMMessage{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *FCMServiceNotiToTopicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notiToTopic_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceNotiToTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *FCMServiceNotiToTopicArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("condition", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:condition: ", p), err)
	}
	if err := oprot.WriteString(string(p.Condition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.condition (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:condition: ", p), err)
	}
	return err
}

func (p *FCMServiceNotiToTopicArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
	}
	return err
}

func (p *FCMServiceNotiToTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceNotiToTopicArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FCMServiceNotiToTopicResult struct {
	Success *TResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewFCMServiceNotiToTopicResult() *FCMServiceNotiToTopicResult {
	return &FCMServiceNotiToTopicResult{}
}

var FCMServiceNotiToTopicResult_Success_DEFAULT *TResponse

func (p *FCMServiceNotiToTopicResult) GetSuccess() *TResponse {
	if !p.IsSetSuccess() {
		return FCMServiceNotiToTopicResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FCMServiceNotiToTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FCMServiceNotiToTopicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FCMServiceNotiToTopicResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FCMServiceNotiToTopicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notiToTopic_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FCMServiceNotiToTopicResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FCMServiceNotiToTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FCMServiceNotiToTopicResult(%+v)", *p)
}
