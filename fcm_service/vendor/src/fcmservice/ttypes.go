// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package fcmservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TDeviceToken string

func TDeviceTokenPtr(v TDeviceToken) *TDeviceToken { return &v }

type TDeviceTokenList []string

func TDeviceTokenListPtr(v TDeviceTokenList) *TDeviceTokenList { return &v }

// Attributes:
//  - Key
//  - Value
type TKeyValue struct {
	Key   string `thrift:"key,1" json:"key"`
	Value string `thrift:"value,2" json:"value"`
}

func NewTKeyValue() *TKeyValue {
	return &TKeyValue{}
}

func (p *TKeyValue) GetKey() string {
	return p.Key
}

func (p *TKeyValue) GetValue() string {
	return p.Value
}
func (p *TKeyValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TKeyValue) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *TKeyValue) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TKeyValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TKeyValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TKeyValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TKeyValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *TKeyValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKeyValue(%+v)", *p)
}

// Attributes:
//  - Title
//  - Body
//  - Icon
//  - Data
//  - ClickAction
type TNotificationPayload struct {
	Title       string       `thrift:"title,1" json:"title"`
	Body        string       `thrift:"body,2" json:"body"`
	Icon        *string      `thrift:"icon,3" json:"icon,omitempty"`
	Data        []*TKeyValue `thrift:"data,4" json:"data,omitempty"`
	ClickAction *string      `thrift:"click_action,5" json:"click_action,omitempty"`
}

func NewTNotificationPayload() *TNotificationPayload {
	return &TNotificationPayload{}
}

func (p *TNotificationPayload) GetTitle() string {
	return p.Title
}

func (p *TNotificationPayload) GetBody() string {
	return p.Body
}

var TNotificationPayload_Icon_DEFAULT string

func (p *TNotificationPayload) GetIcon() string {
	if !p.IsSetIcon() {
		return TNotificationPayload_Icon_DEFAULT
	}
	return *p.Icon
}

var TNotificationPayload_Data_DEFAULT []*TKeyValue

func (p *TNotificationPayload) GetData() []*TKeyValue {
	return p.Data
}

var TNotificationPayload_ClickAction_DEFAULT string

func (p *TNotificationPayload) GetClickAction() string {
	if !p.IsSetClickAction() {
		return TNotificationPayload_ClickAction_DEFAULT
	}
	return *p.ClickAction
}
func (p *TNotificationPayload) IsSetIcon() bool {
	return p.Icon != nil
}

func (p *TNotificationPayload) IsSetData() bool {
	return p.Data != nil
}

func (p *TNotificationPayload) IsSetClickAction() bool {
	return p.ClickAction != nil
}

func (p *TNotificationPayload) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TNotificationPayload) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *TNotificationPayload) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *TNotificationPayload) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Icon = &v
	}
	return nil
}

func (p *TNotificationPayload) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TKeyValue, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TKeyValue{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Data = append(p.Data, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TNotificationPayload) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ClickAction = &v
	}
	return nil
}

func (p *TNotificationPayload) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TNotificationPayload"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TNotificationPayload) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err)
	}
	return err
}

func (p *TNotificationPayload) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err)
	}
	if err := oprot.WriteString(string(p.Body)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err)
	}
	return err
}

func (p *TNotificationPayload) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcon() {
		if err := oprot.WriteFieldBegin("icon", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:icon: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Icon)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.icon (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:icon: ", p), err)
		}
	}
	return err
}

func (p *TNotificationPayload) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:data: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:data: ", p), err)
		}
	}
	return err
}

func (p *TNotificationPayload) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetClickAction() {
		if err := oprot.WriteFieldBegin("click_action", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:click_action: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ClickAction)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.click_action (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:click_action: ", p), err)
		}
	}
	return err
}

func (p *TNotificationPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNotificationPayload(%+v)", *p)
}

// Attributes:
//  - Data
type TDataPayload struct {
	Data []*TKeyValue `thrift:"data,1" json:"data"`
}

func NewTDataPayload() *TDataPayload {
	return &TDataPayload{}
}

func (p *TDataPayload) GetData() []*TKeyValue {
	return p.Data
}
func (p *TDataPayload) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataPayload) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TKeyValue, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TKeyValue{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Data = append(p.Data, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TDataPayload) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDataPayload"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataPayload) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err)
	}
	return err
}

func (p *TDataPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataPayload(%+v)", *p)
}

// Attributes:
//  - NotiPayload
//  - DataPayload
type TFCMMessage struct {
	NotiPayload *TNotificationPayload `thrift:"notiPayload,1" json:"notiPayload"`
	DataPayload *TDataPayload         `thrift:"dataPayload,2" json:"dataPayload"`
}

func NewTFCMMessage() *TFCMMessage {
	return &TFCMMessage{}
}

var TFCMMessage_NotiPayload_DEFAULT *TNotificationPayload

func (p *TFCMMessage) GetNotiPayload() *TNotificationPayload {
	if !p.IsSetNotiPayload() {
		return TFCMMessage_NotiPayload_DEFAULT
	}
	return p.NotiPayload
}

var TFCMMessage_DataPayload_DEFAULT *TDataPayload

func (p *TFCMMessage) GetDataPayload() *TDataPayload {
	if !p.IsSetDataPayload() {
		return TFCMMessage_DataPayload_DEFAULT
	}
	return p.DataPayload
}
func (p *TFCMMessage) IsSetNotiPayload() bool {
	return p.NotiPayload != nil
}

func (p *TFCMMessage) IsSetDataPayload() bool {
	return p.DataPayload != nil
}

func (p *TFCMMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TFCMMessage) readField1(iprot thrift.TProtocol) error {
	p.NotiPayload = &TNotificationPayload{}
	if err := p.NotiPayload.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotiPayload), err)
	}
	return nil
}

func (p *TFCMMessage) readField2(iprot thrift.TProtocol) error {
	p.DataPayload = &TDataPayload{}
	if err := p.DataPayload.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DataPayload), err)
	}
	return nil
}

func (p *TFCMMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TFCMMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TFCMMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notiPayload", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notiPayload: ", p), err)
	}
	if err := p.NotiPayload.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotiPayload), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notiPayload: ", p), err)
	}
	return err
}

func (p *TFCMMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataPayload", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataPayload: ", p), err)
	}
	if err := p.DataPayload.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DataPayload), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataPayload: ", p), err)
	}
	return err
}

func (p *TFCMMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFCMMessage(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - Header
//  - Body
type TResponse struct {
	StatusCode int32  `thrift:"statusCode,1" json:"statusCode"`
	Header     string `thrift:"header,2" json:"header"`
	Body       string `thrift:"body,3" json:"body"`
}

func NewTResponse() *TResponse {
	return &TResponse{}
}

func (p *TResponse) GetStatusCode() int32 {
	return p.StatusCode
}

func (p *TResponse) GetHeader() string {
	return p.Header
}

func (p *TResponse) GetBody() string {
	return p.Body
}
func (p *TResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StatusCode = v
	}
	return nil
}

func (p *TResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Header = v
	}
	return nil
}

func (p *TResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *TResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:statusCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StatusCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statusCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:statusCode: ", p), err)
	}
	return err
}

func (p *TResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("header", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:header: ", p), err)
	}
	if err := oprot.WriteString(string(p.Header)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.header (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:header: ", p), err)
	}
	return err
}

func (p *TResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:body: ", p), err)
	}
	if err := oprot.WriteString(string(p.Body)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:body: ", p), err)
	}
	return err
}

func (p *TResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResponse(%+v)", *p)
}
